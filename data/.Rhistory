---
```{r, echo = FALSE, message = FALSE}
# Querying data from GitHub
library(knitr)
library(jsonlite)
library(dplyr)
# Create variable orgaization that stores the name of out GitHub organization
organization <- "INFO-498F"
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
# Arranged repo_data by the created property in descending order
repo_data <- arrange(repo_data, desc(created_at))
# Create variable num_repos that equals the number of repositories that were returned
num_repos <- length(rownames(repo_data))
# Create variable most_popular that has the name of the repository with the greatest number of forks
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.
```{r, echo = FALSE}
# Data Manipulation
# Creating a column in repo_data that store the date that the repo was created in a readable format
dates <- as.Date(repo_data$created_at)
repo_data <- mutate(repo_data, readable_date = format(dates, format = "%B %d %Y"))
# Create data.frame that only has the columns name, language, forks_count, readable_date
selected_repo_data <- select(repo_data, name, language, forks_count, readable_date)
# Use names function to rename the columns to more readable names
names(selected_repo_data) <- c("name", "language", "amount of forks", "date created")
```
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories.
```{r, echo = FALSE}
# Create a table from the information in selected_repo_data
kable(selected_repo_data)
# Create summary table that shows the number of repositories and average number of forks for each language across the repos
summary_repo <- group_by(repo_data, language) %>%
summarise(average_forks = mean(forks_count))
summary_repo <- mutate(summary_repo, num_repos = table(repo_data$language, useNA = 'ifany'))
kable(summary_repo)
```
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories. This is `r user`'s avatar! ![alt text](`r user_data$avatar_url`)
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories. This is `r user`'s avatar! ![alt text]("user_data$avatar_url")
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories. This is `r user`'s avatar! ![alt text](user_data$avatar_url "user image")
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories.
---
title: "index"
output: html_document
---
```{r, echo = FALSE, message = FALSE}
# Querying data from GitHub
library(knitr)
library(jsonlite)
library(dplyr)
# Create variable orgaization that stores the name of our GitHub organization
organization <- "INFO-498F"
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
# Arranged repo_data by the created property in descending order
repo_data <- arrange(repo_data, desc(created_at))
# Create variable num_repos that equals the number of repositories that were returned
num_repos <- length(rownames(repo_data))
# Create variable most_popular that has the name of the repository with the greatest number of forks
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.
```{r, echo = FALSE}
# Data Manipulation
# Creating a column in repo_data that store the date that the repo was created in a readable format
dates <- as.Date(repo_data$created_at)
repo_data <- mutate(repo_data, readable_date = format(dates, format = "%B %d %Y"))
# Create data.frame that only has the columns name, language, forks_count, readable_date
selected_repo_data <- select(repo_data, name, language, forks_count, readable_date)
# Use names function to rename the columns to more readable names
names(selected_repo_data) <- c("name", "language", "amount of forks", "date created")
```
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories.
```{r, echo = FALSE}
# Create a table from the information in selected_repo_data
kable(selected_repo_data)
# Create summary table that shows the number of repositories and average number of forks for each language across the repos
summary_repo <- group_by(repo_data, language) %>%
summarise(average_forks = mean(forks_count))
summary_repo <- mutate(summary_repo, num_repos = table(repo_data$language, useNA = 'ifany'))
kable(summary_repo)
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`. This is `r user`'s avatar! ![alt text](user_data$avatar_url)
user_data$avatar_url
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`. This is `r user`'s avatar! ![alt text](user_data$avatar_url)
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`. This is `r user`'s avatar!
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`. This is `r user`'s avatar. ![alt text](user_data$avatar_url)
---
title: "index"
output: html_document
---
```{r, echo = FALSE, message = FALSE}
# Querying data from GitHub
library(knitr)
library(jsonlite)
library(dplyr)
# Create variable orgaization that stores the name of our GitHub organization
organization <- "INFO-498F"
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
# Arranged repo_data by the created property in descending order
repo_data <- arrange(repo_data, desc(created_at))
# Create variable num_repos that equals the number of repositories that were returned
num_repos <- length(rownames(repo_data))
# Create variable most_popular that has the name of the repository with the greatest number of forks
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`. This is `r user`'s avatar. ![alt text](user_data$avatar_url)
```{r, echo = FALSE}
# Data Manipulation
# Creating a column in repo_data that store the date that the repo was created in a readable format
dates <- as.Date(repo_data$created_at)
repo_data <- mutate(repo_data, readable_date = format(dates, format = "%B %d %Y"))
# Create data.frame that only has the columns name, language, forks_count, readable_date
selected_repo_data <- select(repo_data, name, language, forks_count, readable_date)
# Use names function to rename the columns to more readable names
names(selected_repo_data) <- c("name", "language", "amount of forks", "date created")
```
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories.
```{r, echo = FALSE}
# Create a table from the information in selected_repo_data
kable(selected_repo_data)
# Create summary table that shows the number of repositories and average number of forks for each language across the repos
summary_repo <- group_by(repo_data, language) %>%
summarise(average_forks = mean(forks_count))
summary_repo <- mutate(summary_repo, num_repos = table(repo_data$language, useNA = 'ifany'))
kable(summary_repo)
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`. This is `r user`'s avatar. ![user avatar](user_data$avatar_url)
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.
---
title: "index"
output: html_document
---
```{r, echo = FALSE, message = FALSE}
# Querying data from GitHub
library(knitr)
library(jsonlite)
library(dplyr)
# Create variable orgaization that stores the name of our GitHub organization
organization <- "INFO-498F"
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
# Arranged repo_data by the created property in descending order
repo_data <- arrange(repo_data, desc(created_at))
# Create variable num_repos that equals the number of repositories that were returned
num_repos <- length(rownames(repo_data))
# Create variable most_popular that has the name of the repository with the greatest number of forks
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.
```{r, echo = FALSE}
# Data Manipulation
# Creating a column in repo_data that store the date that the repo was created in a readable format
dates <- as.Date(repo_data$created_at)
repo_data <- mutate(repo_data, readable_date = format(dates, format = "%B %d %Y"))
# Create data.frame that only has the columns name, language, forks_count, readable_date
selected_repo_data <- select(repo_data, name, language, forks_count, readable_date)
# Use names function to rename the columns to more readable names
names(selected_repo_data) <- c("name", "language", "amount of forks", "date created")
```
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories.
```{r, echo = FALSE}
# Create a table from the information in selected_repo_data
kable(selected_repo_data)
# Create summary table that shows the number of repositories and average number of forks for each language across the repos
summary_repo <- group_by(repo_data, language) %>%
summarise(average_forks = mean(forks_count))
summary_repo <- mutate(summary_repo, num_repos = table(repo_data$language, useNA = 'ifany'))
kable(summary_repo)
```
---
title: "index"
output: html_document
---
```{r, echo = FALSE, message = FALSE}
# Querying data from GitHub
library(knitr)
library(jsonlite)
library(dplyr)
# Create variable orgaization that stores the name of our GitHub organization
organization <- "INFO-498F"
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
# Arranged repo_data by the created property in descending order
repo_data <- arrange(repo_data, desc(created_at))
# Create variable num_repos that equals the number of repositories that were returned
num_repos <- length(rownames(repo_data))
# Create variable most_popular that has the name of the repository with the greatest number of forks
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.  This is `r user`'s avatar. ![user avatar](user_data$avatar_url)
```{r, echo = FALSE}
# Data Manipulation
# Creating a column in repo_data that store the date that the repo was created in a readable format
dates <- as.Date(repo_data$created_at)
repo_data <- mutate(repo_data, readable_date = format(dates, format = "%B %d %Y"))
# Create data.frame that only has the columns name, language, forks_count, readable_date
selected_repo_data <- select(repo_data, name, language, forks_count, readable_date)
# Use names function to rename the columns to more readable names
names(selected_repo_data) <- c("name", "language", "amount of forks", "date created")
```
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories.
```{r, echo = FALSE}
# Create a table from the information in selected_repo_data
kable(selected_repo_data)
# Create summary table that shows the number of repositories and average number of forks for each language across the repos
summary_repo <- group_by(repo_data, language) %>%
summarise(average_forks = mean(forks_count))
summary_repo <- mutate(summary_repo, num_repos = table(repo_data$language, useNA = 'ifany'))
kable(summary_repo)
```
title: "index"
output: html_document
---
title: "index"
output: html_document
---
```{r, echo = FALSE, message = FALSE}
# Querying data from GitHub
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
# Arranged repo_data by the created property in descending order
repo_data <- arrange(repo_data, desc(created_at))
# Create variable num_repos that equals the number of repositories that were returned
num_repos <- length(rownames(repo_data))
# Create variable most_popular that has the name of the repository with the greatest number of forks
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.  This is `r user`'s avatar. ![user avatar](user_data$avatar_url)
---
title: "index"
output: html_document
---
```{r, echo = FALSE}
# Querying data from GitHub
library(knitr)
library(jsonlite)
library(dplyr)
# Create variable orgaization that stores the name of our GitHub organization
organization <- "INFO-498F"
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
# Arranged repo_data by the created property in descending order
repo_data <- arrange(repo_data, desc(created_at))
# Create variable num_repos that equals the number of repositories that were returned
num_repos <- length(rownames(repo_data))
# Create variable most_popular that has the name of the repository with the greatest number of forks
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
```
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.  This is `r user`'s avatar. ![user avatar](user_data$avatar_url)
```{r, echo = FALSE}
# Data Manipulation
# Creating a column in repo_data that store the date that the repo was created in a readable format
dates <- as.Date(repo_data$created_at)
repo_data <- mutate(repo_data, readable_date = format(dates, format = "%B %d %Y"))
# Create data.frame that only has the columns name, language, forks_count, readable_date
selected_repo_data <- select(repo_data, name, language, forks_count, readable_date)
# Use names function to rename the columns to more readable names
names(selected_repo_data) <- c("name", "language", "amount of forks", "date created")
```
Here's a table showing the names, language, amount of forks, and the date created for `r user`'s repositories.
```{r, echo = FALSE}
# Create a table from the information in selected_repo_data
kable(selected_repo_data)
# Create summary table that shows the number of repositories and average number of forks for each language across the repos
summary_repo <- group_by(repo_data, language) %>%
summarise(average_forks = mean(forks_count))
summary_repo <- mutate(summary_repo, num_repos = table(repo_data$language, useNA = 'ifany'))
kable(summary_repo)
```
library(knitr)
library(jsonlite)
library(dplyr)
# Create variable orgaization that stores the name of our GitHub organization
organization <- "INFO-498F"
# Create variable user_data that contains the data about the user from GitHub
user <- "mkfreeman"
access_token <- "c720d4ad71f6eb6a27ca69d1d51fa8d31bf645f8"
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
# Create variable repo_data that contains the data about the user's repositories
# Flattens the data.frame
# Adds the access token
# Sets the maximum amount of repos to 100 by setting per_page to 100
repo_data <- flatten(fromJSON(paste(user_data$repos_url, "?access_token=", access_token, "&per_page=100", sep = "")))
repo_data <- arrange(repo_data, desc(created_at))
num_repos <- length(rownames(repo_data))
most_popular <- as.character(repo_data %>%
filter(forks_count == max(forks_count)) %>%
select(name))
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.  This is `r user`'s avatar. ![user avatar](user_data$avatar_url)
```{r, echo = FALSE}
```{r, echo=FALSE}
source('~/.active-rstudio-document', echo=TRUE)
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.  This is `r user`'s avatar. ![user avatar](user_data$avatar_url)
user_data <- flatten(fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = "")))
user_data <- fromJSON(paste("https://api.github.com/users/", user, "?access_token=", access_token, sep = ""))
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.  This is `r user`'s avatar. ![user avatar](user_data$avatar_url)
The user with username `r user` has `r num_repos` repositories. His/her most popular repository is `r most_popular`.  This is `r user`'s avatar. ![user avatar](https://upload.wikimedia.org/wikipedia/commons/2/20/Window_Porto_Covo_August_2013-2.jpg)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(dplyr)
library(plotly)
setwd("/Users/amywang/Documents/info498f/a7-collaborative-coding/data")
data <- read.csv("intro_survey_data.csv")
names(data) <- c('ClassStanding', 'InfoProspective', 'OS', 'TerminalExperience', 'GitFamiliarity',
'MarkDownFamiliarity', 'RFamiliarity', 'ProgrammingExperience', 'CountriesVisited',
'CatOrDog', 'SeahawksFan')
git_familiarity_data <- data %>% group_by(GitFamiliarity) %>%
summarise(number_of_students = n())
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar"
)%>%
layout(p, title = 'Familiarity with Git')
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar"
)%>%
layout(p, title = 'Familiarity with Git')
p
plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar"
)%>%
layout(p, title = 'Familiarity with Git')
plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar"
)%>%
layout(p, title = 'Familiarity with Git')
plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar"
)%>%
layout(title = 'Familiarity with Git')
build_chart_1 <- function(data) {
git_familiarity_data <- data %>% group_by(GitFamiliarity) %>%
summarise(number_of_students = n())
# Creating a bar chart
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar"
)%>%
layout(p, title = 'Familiarity with Git')
return(p)
}
build_chart_1(data)
chart <- build_chart_1(data)
View(chart)
build_chart_1 <- function(data) {
git_familiarity_data <- data %>% group_by(GitFamiliarity) %>%
summarise(number_of_students = n())
# Creating a bar chart
plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar"
)%>%
layout(title = 'Familiarity with Git')
}
chart <- build_chart_1(data)
build_chart_1(data)
chart <- build_chart_1(data)
View(chart)
print(chart)
build_chart_1 <- function(data) {
names(data) <- c('ClassStanding', 'InfoProspective', 'OS', 'TerminalExperience', 'GitFamiliarity',
'MarkDownFamiliarity', 'RFamiliarity', 'ProgrammingExperience', 'CountriesVisited',
'CatOrDog', 'SeahawksFan')
git_familiarity_data <- data %>% group_by(GitFamiliarity) %>%
summarise(number_of_students = n())
# Creating a bar chart
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar") %>%
layout(title = 'Familiarity with Git')
return(p)
}
build_chart_1(data)
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar") %>%
layout(p, title = 'Familiarity with Git')
build_chart_1 <- function(data) {
names(data) <- c('ClassStanding', 'InfoProspective', 'OS', 'TerminalExperience', 'GitFamiliarity',
'MarkDownFamiliarity', 'RFamiliarity', 'ProgrammingExperience', 'CountriesVisited',
'CatOrDog', 'SeahawksFan')
git_familiarity_data <- data %>% group_by(GitFamiliarity) %>%
summarise(number_of_students = n())
# Creating a bar chart
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar")
layout(p, title = 'Familiarity with Git')
return(p)
}
build_chart_1(data)
names(data) <- c('ClassStanding', 'InfoProspective', 'OS', 'TerminalExperience', 'GitFamiliarity',
'MarkDownFamiliarity', 'RFamiliarity', 'ProgrammingExperience', 'CountriesVisited',
'CatOrDog', 'SeahawksFan')
git_familiarity_data <- data %>% group_by(GitFamiliarity) %>%
summarise(number_of_students = n())
x <- list(
title = "Git Familiarity"
)
# Setting y axis title
y <- list(
title = "Number of Students"
)
# Creating a bar chart
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar")
layout(p, xaxis = x, yaxis = y, title = 'Familiarity with Git')
# changes the names of the columns in original data
names(data) <- c('ClassStanding', 'InfoProspective', 'OS', 'TerminalExperience', 'GitFamiliarity',
'MarkDownFamiliarity', 'RFamiliarity', 'ProgrammingExperience', 'CountriesVisited',
'CatOrDog', 'SeahawksFan')
# create new data frame that summarizes the number of students with different git experience
git_familiarity_data <- data %>% group_by(GitFamiliarity) %>%
summarise(number_of_students = n())
# name for the x axis
x <- list(
title = "Git Familiarity"
)
# name for the y axis
y <- list(
title = "Number of Students"
)
# creating a bar chart comparing the number of students with what level of git familiarity
p <- plot_ly(git_familiarity_data,
x = GitFamiliarity,
y = number_of_students,
type = "bar")
# setting the layout (x axis, y axis, title)
layout(p, xaxis = x, yaxis = y, title = 'Familiarity with Git')
return(p)
